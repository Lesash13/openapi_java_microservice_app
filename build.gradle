import org.openapitools.generator.gradle.plugin.tasks.GenerateTask

plugins {
    id 'org.springframework.boot' version "${springBootVersion}"
    id 'io.spring.dependency-management' version "${springDependencyManagement}"
    id 'java'
    id 'org.openapi.generator' version "${openapiGenVersion}"
    id 'pl.allegro.tech.build.axion-release' version "$allegroBuild"
}

scmVersion {
    tag {
        prefix = project.name
        initialVersion = { config, position -> return '1.0.0' }
    }
    nextVersion {
        suffix = 'alpha'
    }
    ignoreUncommittedChanges = false
    useHighestVersion = true
    versionIncrementer 'incrementMinor'
}

group = 'ngfs.integratedpeoplemanagement'
version = scmVersion.version

tasks.withType(JavaCompile) {
    options.encoding = "$sourceEncoding"
}

repositories {
    mavenCentral()
}

bootRun {
}

sourceSets {
    main {
        java {
            srcDirs "$buildDir/openapi-generated-src", "$buildDir/wsdl-generated-src"
        }
    }
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file("src/integration-test/resources")
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestImplementation.extendsFrom implementation

    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

dependencies {
    compileOnly("io.swagger:swagger-jaxrs:$swaggerVersion") { transitive = false }

    implementation "io.swagger:swagger-annotations:$swaggerVersion"
    implementation "org.apache.cxf:cxf-spring-boot-starter-jaxrs:$cxfSpringBootVersion"
    implementation "com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:$jacksonVersion"
    implementation("javax.xml.ws:jaxws-api:$jaxwsVersion") { transitive = false }
    implementation("net.logstash.logback:logstash-logback-encoder:$logstashEncoderVersion") { transitive = false }
    implementation "org.apache.cxf:cxf-rt-features-logging:$cxfSpringBootVersion"
    implementation "org.springframework.boot:spring-boot-starter-actuator:$springBootVersion"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa:$springBootVersion"
    implementation "org.postgresql:postgresql:$postgresDriverVersion"
    implementation "org.springframework.boot:spring-boot-starter-web:$springBootVersion"
    implementation "org.hibernate.validator:hibernate-validator:${hibernateVersion}"
    implementation "org.camunda.bpm.dmn:camunda-engine-dmn:${camundaVersion}"
    implementation "org.mapstruct:mapstruct:${mapStructVersion}"
    implementation "org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}"
    implementation "org.apache.tomcat.embed:tomcat-embed-websocket:${tomcatVersion}"
    implementation "org.apache.tomcat:tomcat-annotations-api:${tomcatVersion}"

    annotationProcessor "org.mapstruct:mapstruct-processor:${mapStructVersion}"

    testImplementation "org.junit.jupiter:junit-jupiter:$junitVersion"
    testImplementation "org.mockito:mockito-inline:$mockitoInlineVersion"
    testImplementation "org.springframework.boot:spring-boot-starter-test:$springBootVersion"

    integrationTestImplementation "com.github.tomakehurst:wiremock-jre8:$wiremockVersion"
    integrationTestImplementation "io.rest-assured:rest-assured:$restAssuredVersion"
    integrationTestImplementation "io.rest-assured:json-path:$restAssuredVersion"
    integrationTestImplementation "io.rest-assured:xml-path:$restAssuredVersion"
    integrationTestImplementation "com.jcraft:jsch:$jschVersion"

    developmentOnly "org.springframework.boot:spring-boot-devtools:$springBootVersion"
}

test {
    useJUnitPlatform()
}

bootJar {
    manifest {
        attributes(
                'Created-By': "${System.properties['java.version']} (${System.properties['java.vendor']})",
                'Build-Tool': "Gradle $gradle.gradleVersion",
                'Built-By': System.properties['user.name'],
                'Implementation-Title': rootProject.name,
                'Implementation-Vendor': 'Vendor',
                'Implementation-Version': "$project.version"
        )
    }
}

task buildCxfServer(type: GenerateTask) {
    generatorName = "jaxrs-spec"
    inputSpec = "$rootDir/src/main/resources/api/PeopleService_OpenAPI_1.0.1.yaml"
    outputDir = "$buildDir/openapi-generated-src"
    configOptions = [
            dateLibrary   : "java8",
            sourceFolder  : "",
            returnResponse: "true",
            interfaceOnly : "true"
    ]
    systemProperties = [
            apis  : "",
            models: ""
    ]
    apiPackage = "ngfs.integratedpeoplemanagement.peopleservice.api"
    modelPackage = "ngfs.integratedpeoplemanagement.peopleservice.model"
    modelNameSuffix = "Dto"
    generateApiTests = false
    generateModelTests = false
}

task buildCxfClient(type: GenerateTask) {
    generatorName = "jaxrs-cxf-client"
    inputSpec = "$rootDir/src/main/resources/api/HouseSerive_OpenAPI.yaml"
    outputDir = "$buildDir/openapi-generated-src"
    configOptions = [
            dateLibrary : "java8",
            sourceFolder: ""
    ]
    systemProperties = [
            apis  : "",
            models: ""
    ]
    apiPackage = "ngfs.integratedpeoplemanagement.houseservice.api"
    modelPackage = "ngfs.integratedpeoplemanagement.houseservice.model"
    modelNameSuffix = "Dto"
    generateApiTests = false
    generateModelTests = false
}

task generateArtifacts(dependsOn: ['buildCxfServer', 'buildCxfClient'])

compileJava.dependsOn generateArtifacts

task integrationTest(type: Test) {
    description = 'Runs integration tests.'
    group = 'verification'

    useJUnitPlatform()
    jvmArgs(['--enable-preview'])

    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath

    outputs.upToDateWhen { false }
}

release {
    doFirst {
        setGitSaCredentials()
    }
}

markNextVersion {
    doFirst {
        setGitSaCredentials()
    }
}

def setGitSaCredentials() {
    if (project.hasProperty('gitsa_user')) {
        scmVersion.repository.customUsername = project.gitsa_user
    }
    if (project.hasProperty('gitsa_pwd')) {
        scmVersion.repository.customPassword = project.gitsa_pwd
    }
}